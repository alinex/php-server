/** @page codeStyleguide Coding Style Guide

The following page describes the use of coding rules adhered to when developing
Alinex.

The main goal of the Styleguide is clean code which is:
- Readable
- Extensible
- Efficient

You should be using the coding standard which is defined for Alinex to keep it
homogene and easy to read for all. The basis will be the Zend Coding Style Guide
http://framework.zend.com/manual/1.12/en/coding-standard.html.

Also follow the @ref docStyleguide which ensures a complete API can be created.

As a control instance PHP Code Sniffer can beu used (inside development
environment or as test method).

Some special parts are shown below:
- @ref fileFormat
- @ref closingTag
- @ref naming
    - @ref classMethodNaming
    - @ref variableNames
    - @ref constantNames
    - @ref trueFalse
- @ref logicalOperators
- @ref returnTypecast
- @ref phpCompatibility
- @ref classStructure
- @ref whitespace
- @ref strings
- @ref defaultArguments
- @ref localizedText
- @ref exceptions
- @ref structuring

@section fileFormat File Format

- Files should be saved with Unicode (UTF-8) encoding. The BOM should not be used.
- Unix line endings should be used (LF).

@section closingTag PHP Opening/Closing Tag

Always use full PHP opening tags, in case a server does not have short_open_tag
enabled.

No whitespace can precede the opening PHP tag or follow the closing PHP tag.
Output is buffered, so whitespace in your files can cause output to begin
before Alinex outputs its content, leading to errors and an inability for
Alinex to send proper headers.

The PHP closing tag on a PHP document ?> is optional to the PHP parser. However,
if used, any whitespace following the closing tag, whether introduced by the
developer, user, or an FTP application, can cause unwanted output, PHP errors,
or if the latter are suppressed, blank pages.\n
For this reason, all PHP files should OMIT the closing PHP tag, and instead use
a comment block to mark the end of file and it's location relative to the
application root. This allows you to still identify a file as being complete
and not truncated.
@verbatim
INCORRECT: <?php echo "Here's my code!"; ?>
CORRECT: <?php echo "Here's my code!";
@endverbatim

@section naming Naming Convention

@subsection classMethodNaming Class and Method Naming

Class names should always start with an uppercase letter. Multiple words should
be written in CamelCased notation (each next words starts with a capital letter
and is direct appended). All other class methods should be entirely lowercased
and named to clearly indicate their function, preferably including a verb.
Try to avoid overly long and verbose names.
@verbatim
INCORRECT: class superclass
           class Super_class
CORRECT:   class SuperClass
           class SuperClass { function __construct() { } }
@endverbatim

@subsection variableNames Variable Names

The guidelines for variable naming is very similar to that used for class
methods. Namely, variables should start with lowercase letters and use CamelCase
and be reasonably named to indicate their purpose and contents. Very short,
non-word variables should only be used as iterators in for() loops.

@subsection constantNames Constants

Constants follow the same guidelines as do variables, except constants should
always be fully uppercase and words will be seperated using underscores.

@subsection trueFalse TRUE, FALSE, and NULL

TRUE, FALSE, and NULL keywords should always be fully uppercase.

@section logicalOperators Logical Operators

Use of \c || and \c && is preferred but \c OR and \c AND are also possible.
And a space should always precede and follow \c !.

@section returnTypecast Comparing Return Values

Some PHP functions return FALSE on failure, but may also have a valid return
value of "" or 0, which would evaluate to FALSE in loose comparisons.
Be explicit by comparing the variable type when using these return values
in conditionals to ensure the return value is indeed what you expect, and not
a value that has an equivalent loose-type evaluation.

Use the same stringency in returning and checking your own variables.
Use \c === and \c !== as necessary.

@section phpCompatibility Compatibility

Unless specifically mentioned in your add-on's documentation, all code must be
compatible with the current PHP from debian stable. Because this is the
distribution which hangs the most behind.

If non-default libraries are used, they have to be optional or directly
installed as vendor library within the project.

@section classStructure Class Structure

# Use namespaces for the classes.
# Use separate files for each class your add-on uses.
# Name the file like the class
# Put it in the directory named after the namespace

@section whitespace Whitespace

Use 4 spaces instead of tabs for indenting so that it will look the same on
each editor. Also indent each block of code.

@section phpErrors PHP Errors

Code must run error free and not rely on warnings and notices to be hidden to
meet this requirement. For instance, never access a variable that you did not
set yourself (such as $_POST array keys) without first checking to see that it
isset().

@section strings Strings

Always use single quoted strings unless you need variables parsed, and in cases
where you do need variables parsed, use braces to prevent greedy token parsing.
You may also use double-quoted strings if the string contains single quotes,
so you do not have to use escape characters.

@section defaultArguments Default Function Arguments

Whenever appropriate, provide function argument defaults, which helps prevent
PHP errors with mistaken calls and provides common fallback values which can
save a few lines of code.

@section localizedText Localized Text

Any text that is output in the control panel should use xget style (see
\ref codeI18n)


@section exceptions Exception Handling

Throw exceptions when your code cannot complete the requested instruction with
the given input, always throw a custom exception that actually tells the
calling code what the situation is, and if you call other code then only catch
the exceptions that you can and should handle.

@section structuring Code Structure

Alinex should be completely written object oriented to better support code
reuse. Follow the standard design patterns as possible. Dependencies should be
kept at a minimum.

Most problems which are solved with recursion can be solved with iteration, so
keep recursion for those which specifically deserve it.


*/
