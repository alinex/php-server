/** @page codeI18n Internationalization

To support multi language applications the gettext library is used.

<b>Some reasons for gettext: </b>
- defacto-standard for i18n of unix systems and their applications
- very, very fast, because it uses a binary format and native caching
- no database required, get the load out of it
- you can put the translation files within your version-control
- Many editors for every plattform. -> easy for external translators...
- powerful command line tools for special needs.
- stable, stable, stable...

<b>some disadvantages: </b>
- not thread-safe (apply for apache 2 with worker-mpm)
- You have to spend some time to get it work
- debbuging gettext can be hard in PHP
- restart of webserver needed to activate new translations (not in cgi version)

@note
As alternative the thread safe fallback using PHP only can be used. This
functions won't need the gettext support compiled in, but are slower.

This library uses an optimized version of the default gettext support
which allows named arguments using the easy <code>{var}</code> syntax.
This makes it easy for translators to change the word order...

@section gettextUsage Usgae

To support the variable substitution only use the following function
instead of the gettext() call:
@code
// TRANS: Welcome message for each user.
echo tr('Hello {name}!', array('name' => 'Alex'));
@endcode
The additional comment starting with <code>TRANS:</code> will be added
to the translation file as comment for the translators. This can be
used to give a context help to them.

Also it is possible to use plural forms as easy as normal text:
@code
// TRANS: Welcome message for returning user.
echo trn(
    'You get {number} point for login!',
    'You get {number} points for login!',
    2, array('number' => 2)
);
@endcode

The comment starting with <code>TRANS:</code> will be copied to the
translation file and help to give the translator some context help.

@section gettextWorkflow Workflow

The whole magic behind, maintaining the translation files will be done
with the shell scripts of the development environment.

-# The marked strings are exported into *.pot files.
-# From which the language specific *.po files will be created or merged.
-# The translated *.po files will be converted into *.mo files
-# The *.mo files will be delivered with the application.

*/
